geom_point(data = df, aes(x = lon, y = lat, fill="black", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE) + scale_x_continuous(limits = c(-61.6, -61.15), expand = c(0, 0)) +
scale_y_continuous(limits = c(15.15, 15.7), expand = c(0, 0))
mapjess <- get_map(location = c(lon = mean(df$lon), lat = mean(df$lat)), zoom = 10,
maptype = "satellite", scale = 2)
# plotting the map with some points on it
ggmap(mapjess) +
geom_point(data = df, aes(x = lon, y = lat, color="red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE) + scale_x_continuous(limits = c(-61.6, -61.15), expand = c(0, 0)) +
scale_y_continuous(limits = c(15.15, 15.7), expand = c(0, 0))
?fill
mapjess <- get_map(location = c(lon = mean(df$lon), lat = mean(df$lat)), zoom = 10,
maptype = "satellite", scale = 2)
# plotting the map with some points on it
ggmap(mapjess) +
geom_point(data = df, aes(x = lon, y = lat, fill="black", color="red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE) + scale_x_continuous(limits = c(-61.6, -61.15), expand = c(0, 0)) +
scale_y_continuous(limits = c(15.15, 15.7), expand = c(0, 0))
mapjess <- get_map(location = c(lon = mean(df$lon), lat = mean(df$lat)), zoom = 10,
maptype = "satellite", scale = 2)
# plotting the map with some points on it
ggmap(mapjess) +
geom_point(data = df, aes(x = lon, y = lat, fill="black", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE) + scale_x_continuous(limits = c(-61.6, -61.15), expand = c(0, 0)) +
scale_y_continuous(limits = c(15.15, 15.7), expand = c(0, 0))
# getting the map
mapjess <- get_map(location = c(lon = mean(df$lon), lat = mean(df$lat)), zoom = 10,
maptype = "satellite", scale = 2)
# plotting the map with some points on it
ggmap(mapjess) +
geom_point(data = df, aes(x = lon, y = lat, fill="black", alpha = 0.8), size = 6, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE) + scale_x_continuous(limits = c(-61.6, -61.15), expand = c(0, 0)) +
scale_y_continuous(limits = c(15.15, 15.7), expand = c(0, 0))
mapjess <- get_map(location = c(lon = mean(df$lon), lat = mean(df$lat)), zoom = 10,
maptype = "satellite", scale = 2)
# plotting the map with some points on it
ggmap(mapjess) +
geom_point(data = df, aes(x = lon, y = lat, fill="black"), size = 6, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE) + scale_x_continuous(limits = c(-61.6, -61.15), expand = c(0, 0)) +
scale_y_continuous(limits = c(15.15, 15.7), expand = c(0, 0))
# getting the map
mapjess <- get_map(location = c(lon = mean(df$lon), lat = mean(df$lat)), zoom = 10,
maptype = "satellite", scale = 2)
# plotting the map with some points on it
ggmap(mapjess) +
geom_point(data = df, aes(x = lon, y = lat), color="black", size = 6, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE) + scale_x_continuous(limits = c(-61.6, -61.15), expand = c(0, 0)) +
scale_y_continuous(limits = c(15.15, 15.7), expand = c(0, 0))
# getting the map
mapjess <- get_map(location = c(lon = mean(df$lon), lat = mean(df$lat)), zoom = 10,
maptype = "satellite", scale = 2)
# plotting the map with some points on it
ggmap(mapjess) +
geom_point(data = df, aes(x = lon, y = lat), color="yellow", size = 6, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE) + scale_x_continuous(limits = c(-61.6, -61.15), expand = c(0, 0)) +
scale_y_continuous(limits = c(15.15, 15.7), expand = c(0, 0))
mapjess <- get_map(location = c(lon = mean(df$lon), lat = mean(df$lat)), zoom = 10,
maptype = "satellite", scale = 2)
# plotting the map with some points on it
ggmap(mapjess) +
geom_point(data = df, aes(x = lon, y = lat), color="yellow", size = 7, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE) + scale_x_continuous(limits = c(-61.6, -61.15), expand = c(0, 0)) +
scale_y_continuous(limits = c(15.15, 15.7), expand = c(0, 0))
read.csv('/Users/jessicajudson/Desktop/Matt/nfllines/nfl2013lines.csv', header = T, stringsAsFactors = F)
nfl <- rbind(nfl2013,nfl2012,nfl2011,nfl2010,nfl2009,nfl2008,nfl2007,nfl2006,nfl2005,nfl2004,nfl2003,nfl2002,nfl2001)
nfl2013 <- read.csv('/Users/jessicajudson/Desktop/Matt/nfllines/nfl2013lines.csv', header = T, stringsAsFactors = F)
nfl2012 <- read.csv('/Users/jessicajudson/Desktop/Matt/nfllines/nfl2012lines.csv', header = T, stringsAsFactors = F)
nfl2011 <- read.csv('/Users/jessicajudson/Desktop/Matt/nfllines/nfl2011lines.csv', header = T, stringsAsFactors = F)
nfl2010 <- read.csv('/Users/jessicajudson/Desktop/Matt/nfllines/nfl2010lines.csv', header = T, stringsAsFactors = F)
nfl2009 <- read.csv('/Users/jessicajudson/Desktop/Matt/nfllines/nfl2009lines.csv', header = T, stringsAsFactors = F)
nfl2008 <- read.csv('/Users/jessicajudson/Desktop/Matt/nfllines/nfl2008lines.csv', header = T, stringsAsFactors = F)
nfl2007 <- read.csv('/Users/jessicajudson/Desktop/Matt/nfllines/nfl2007lines.csv', header = T, stringsAsFactors = F)
nfl2006 <- read.csv('/Users/jessicajudson/Desktop/Matt/nfllines/nfl2006lines.csv', header = T, stringsAsFactors = F)
nfl2005 <- read.csv('/Users/jessicajudson/Desktop/Matt/nfllines/nfl2005lines.csv', header = T, stringsAsFactors = F)
nfl2004 <- read.csv('/Users/jessicajudson/Desktop/Matt/nfllines/nfl2004lines.csv', header = T, stringsAsFactors = F)
nfl2003 <- read.csv('/Users/jessicajudson/Desktop/Matt/nfllines/nfl2003lines.csv', header = T, stringsAsFactors = F)
nfl2002 <- read.csv('/Users/jessicajudson/Desktop/Matt/nfllines/nfl2002lines.csv', header = T, stringsAsFactors = F)
nfl2001 <- read.csv('/Users/jessicajudson/Desktop/Matt/nfllines/nfl2001lines.csv', header = T, stringsAsFactors = F)
nfl <- rbind(nfl2013,nfl2012,nfl2011,nfl2010,nfl2009,nfl2008,nfl2007,nfl2006,nfl2005,nfl2004,nfl2003,nfl2002,nfl2001)
rm(nfl2013,nfl2012,nfl2011,nfl2010,nfl2009,nfl2008,nfl2007,nfl2006,nfl2005,nfl2004,nfl2003,nfl2002,nfl2001)
View(nfl)
summary(nfl)
nfl$result <- nfl$Home.Score - nfl$Visitor.Score
summary(nfl$result)
View(nfl)
library(data.table)
install.packages('datatable')
install.packages('data.table')
library(data.table)
nfl$year <- year(nfl$Date)
nfl$Date <- as.Date(nfl$Date)
nfl$year <- year(nfl$Date)
nfl$key <- 1:nrow(nfl)
View(nfl)
rm(list = ls())
library(data.table)
nfl2013 <- read.csv('/Users/jessicajudson/Desktop/Matt/nfllines/nfl2013lines.csv', header = T, stringsAsFactors = F)
nfl2012 <- read.csv('/Users/jessicajudson/Desktop/Matt/nfllines/nfl2012lines.csv', header = T, stringsAsFactors = F)
nfl2011 <- read.csv('/Users/jessicajudson/Desktop/Matt/nfllines/nfl2011lines.csv', header = T, stringsAsFactors = F)
nfl2010 <- read.csv('/Users/jessicajudson/Desktop/Matt/nfllines/nfl2010lines.csv', header = T, stringsAsFactors = F)
nfl2009 <- read.csv('/Users/jessicajudson/Desktop/Matt/nfllines/nfl2009lines.csv', header = T, stringsAsFactors = F)
nfl2008 <- read.csv('/Users/jessicajudson/Desktop/Matt/nfllines/nfl2008lines.csv', header = T, stringsAsFactors = F)
nfl2007 <- read.csv('/Users/jessicajudson/Desktop/Matt/nfllines/nfl2007lines.csv', header = T, stringsAsFactors = F)
nfl2006 <- read.csv('/Users/jessicajudson/Desktop/Matt/nfllines/nfl2006lines.csv', header = T, stringsAsFactors = F)
nfl2005 <- read.csv('/Users/jessicajudson/Desktop/Matt/nfllines/nfl2005lines.csv', header = T, stringsAsFactors = F)
nfl2004 <- read.csv('/Users/jessicajudson/Desktop/Matt/nfllines/nfl2004lines.csv', header = T, stringsAsFactors = F)
nfl2003 <- read.csv('/Users/jessicajudson/Desktop/Matt/nfllines/nfl2003lines.csv', header = T, stringsAsFactors = F)
nfl2002 <- read.csv('/Users/jessicajudson/Desktop/Matt/nfllines/nfl2002lines.csv', header = T, stringsAsFactors = F)
nfl2001 <- read.csv('/Users/jessicajudson/Desktop/Matt/nfllines/nfl2001lines.csv', header = T, stringsAsFactors = F)
nfl <- rbind(nfl2013,nfl2012,nfl2011,nfl2010,nfl2009,nfl2008,nfl2007,nfl2006,nfl2005,nfl2004,nfl2003,nfl2002,nfl2001)
rm(nfl2013,nfl2012,nfl2011,nfl2010,nfl2009,nfl2008,nfl2007,nfl2006,nfl2005,nfl2004,nfl2003,nfl2002,nfl2001)
summary(nfl)
nfl$result <- nfl$Home.Score - nfl$Visitor.Score
nfl$Date <- as.Date(nfl$Date,format = '%m/%d/%Y')
nfl$year <- year(nfl$Date)
nfl$key <- 1:nrow(nfl)
summary(nfl)
View(nfl)
as.Date('2005-10-01')
as.Date('2005-10-01') - as.Date('2005-10-15')
(as.Date('2005-10-01') - as.Date('2005-10-'))/365
as.numeric(as.Date('2005-10-01') - as.Date('2005-10-'))/365
as.numeric(as.Date('2005-10-01') - as.Date('2005-10-15'))/365
(as.Date('2005-10-01') - as.Date('2005-10-15'))/365
firstDate <- as.data.table(nfl[,c('year','Date')])[,lapply(.SD,min)]
View(firstDate)
firstDate <- as.data.table(nfl[,c('year','Date')])[,lapply(.SD,min), by = 'year']
View(firstDate)
month(nfl$Date)
firstDate <- as.data.table(nfl[month(nfl$Date) != 1,c('year','Date')])[,lapply(.SD,min), by = 'year']
View(firstDate)
getWeek <- join(nfl[,c('key','year','Date')],firstDate,by = 'year')
library(dplyr)
install.packages('dplyr')
library(dplyr)
getWeek <- join(nfl[,c('key','year','Date')],firstDate,by = 'year')
?join
getWeek <- join(nfl[,c('key','year','Date')],firstDate,by = 'year')
getWeek <- dplyr::join(nfl[,c('key','year','Date')],firstDate,by = 'year')
getWeek <- join(nfl[,c('key','year','Date')],firstDate,by = 'year')
?join
library(plyr)
getWeek <- join(nfl[,c('key','year','Date')],firstDate,by = 'year')
View(getWeek)
View(getWeek)
?setnames
setnames(firstDate,'Date','firstDate')
getWeek <- join(nfl[,c('key','year','Date')],firstDate,by = 'year')
getWeek$week <- floor(as.numeric(getWeek$Date - getWeek$firstDate)/7 + 1)
View(getWeek)
summary(getWeek$week)
getWeek$firstDate[getWeek$firstDate < 1] <- 17
getWeek$week[getWeek$week < 1] <- 17
count(nfl$week)
count(getWeek$week)
nfl <- join(nfl,getWeek[,c('key','week')],by = 'key')
View(nfl)
# loading the required packages
library(ggplot2)
library(ggmap)
# creating a sample data.frame with your lat/lon points
lon <- c(-61.4472)
lat <- c(15.450319)
df <- as.data.frame(cbind(lon,lat))
# getting the map
mapjess <- get_map(location = c(lon = mean(df$lon), lat = mean(df$lat)), zoom = 10,
maptype = "satellite", scale = 2)
# plotting the map with some points on it
ggmap(mapjess) +
geom_point(data = df, aes(x = lon, y = lat), color="yellow", size = 7, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE) + scale_x_continuous(limits = c(-61.6, -61.15), expand = c(0, 0)) +
scale_y_continuous(limits = c(15.15, 15.7), expand = c(0, 0))
1+1
5^3
7*(8-2)
1==1
x<-5/10
x
x <- 1:100
x*2
2^x
x <- c(1,2,3,4,5)
y <- c(1,2,3)
x+y
x + y
ls()
rm(list <- ls())
rm(list = ls())
?ls
install.packages("ggplot2")
library(ggplot2)
load("~/EEB546X_RProject/EEB546X_RProject.Rproj")
cars
library(plyr)
a <- ddply(cars,"speed",sum)
View(a)
cars[order(cars$speed),]
View(a)
a <- ddply(cars,"speed",+)
a <- ddply(cars,"speed","+")
View(a)
a <- ddply(cars,"speed",sum)
View(a)
?ddply
a <- ddply(cars,speed,sum)
a <- ddply(cars,"speed",sum)
View(a)
View(cars)
str(cars)
sum(1,2)
sum(4,5)
sum(2,10)
b <- ddply(cars,'speed',product)
b <- ddply(cars,'speed',mean)
View(b)
a <- ddply(cars,"speed","sum")
View(a)
a <- as.data.table(cars)[,lapply(.SD,sum),by = 'speed']
library(data.table)
a <- as.data.table(cars)[,lapply(.SD,sum),by = 'speed']
View(a)
a <- ddply(cars,"speed",sum)
View(a)
a <- as.data.table(cars)[,lapply(.SD,sum),by = 'speed']
View(a)
library(plyr)
a <- as.data.table(cars)[,lapply(.SD,sum),by = 'speed']
View(a)
View(cars)
a <- ddply(cars,.(speed),sum)
View(a)
a <- ddply(cars,.(speed),summarize)
a <- ddply(cars,.(speed),mean)
a <- ddply(cars,.speed,mean)
a <- ddply(cars,.(speed),mean)
a <- ddply(cars,.(speed),diff)
a <- ddply(cars,.(speed),prod)
View(a)
a <- ddply(cars,.(dist),sum)
View(a)
a <- ddply(cars,.(speed),sum)
View(a)
cars2 <- cars
cars2$speed <- as.factor(cars2$speed)
a <- ddply(cars2,"speed",sum)
a <- as.data.table(cars)[,lapply(.SD,sum),by = 'speed']
View(a)
source("http://bioconductor.org/biocLite.R")
biocLite()
library(IRanges)
rng <- IRanges(start=4, end=13)
rng
rng2 <- IRanges(start=4, width=3)
rng2
x <- IRanges(start=c(4, 7, 2, 20), end=c(13, 7, 5, 23))
x
names(x) <- letters[1:4]
x
class(x)
width(x)
start(x)
end(x)
end(x)
end(x) <- end(x)+4
end(x)
x
range(x)
x[2:3]
start(x) < 5
x[start(x) < 5]
x[width(x) > 8]
a <- IRanges(start=7, width=4)
a
b <- IRanges(start=2, end=5)
b
c <- c(a, b)
c
class(c)
x <- IRanges(start=c(40, 80), end=c(67, 114))
x
x + 4L
x - 10L
y <- IRanges(start=c(4, 6, 10, 12), width=13)
y
restrict(y, 5, 10)
x
flank(x, width=7)
flank(x, width=7, start=FALSE) #can specify forward versus revers
promoters <- flank(x, width=20)
promoters
install.packages(pwr)
install.packages("pwr")
library(IRanges)
set.seed(0)
alns <- IRanges(start=sample(seq_len(50), 20), width=5)
head(alns, 10)
reduce(alns) #collapse into super reads
gaps(alns) #pull out the gaps in your alignment
a <- IRanges(start=4, end=13)
b <- IRanges(start=12, end=17)
union(a,b)
a
b
intersect(a,b)
setdiff(a,b)
qry <- IRanges(start=c(1, 26, 19, 11, 21, 7), end=c(16, 30, 19, 15, 24, 8),
names=letters[1:6])
sbj <- IRanges(start=c(1, 19, 10), end=c(5, 29, 16), names=letters[24:26])
qry
sbj
hts <- findOverlaps(qry,sbj)
Class(hts)
class(hts)
hts
names(qry)[queryHits(hts)]
names(sbj)[subjectHits(hts)]
hts_within <- findOverlaps(qry, sbj, type="within")
hts_within
findOverlaps(qry, sbj, select="first")
sbj_it <- IntervalTree(sbj)
library(GenomicRanges)
biocLite("GenomicRanges")
source("http://bioconductor.org/biocLite.R")
biocLite()
sbj_it <- IntervalTree(sbj)
as.matrix(hts)
countQueryHits(hts)
setNames(countQueryHits(hts), names(qry))
countSubjectHits(hts)
ranges(hts, qry, sbj)
countOverlaps(qry, sbj)
subsetByOverlaps(qry, sbj)
qry <- IRanges(start=6, end=13, name='query')
sbj <- IRanges(start=c(2, 4, 18, 19), end=c(4, 7, 21, 24), names=1:4)
nearest(qry, sbj)
sbj
precede(qry, sbj)
follow(qry, sbj)
qry <- IRanges(sample(seq_len(1000), 5), width=10)
sbj <- IRanges(sample(seq_len(1000), 5), width=10)
distanceToNearest(qry, sbj)
distance(qry, sbj)
qry
sbj
library(GenomicRanges)
biocLite("GenomicRanges")
library(GenomicRanges)
gr <- GRanges(seqname=c("chr1", "chr1", "chr2", "chr3"),
ranges=IRanges(start=5:8, width=10),
strand=c("+", "-", "-", "+"))
gr
gr <- GRanges(seqname=c("chr1", "chr1", "chr2", "chr3"), ranges=IRanges(start=5:8, width=10),
strand=c("+", "-", "-", "+"), gc=round(runif(4), 3))
gr
seqlens <- c(chr1=152, chr2=432, chr3=903) #specify sequence lengths to calculate gaps in downstream analysis
gr <- GRanges(seqname=c("chr1", "chr1", "chr2", "chr3"),
ranges=IRanges(start=5:8, width=10),
strand=c("+", "-", "-", "+"),
gc=round(runif(4), 3),
seqlengths=seqlens)
gr
start(gr)
end(gr)
seqnames(gr)
strand(gr)
names(gr) <- letters[1:length(gr)]
gr
table(seqnames(gr))
mcols(gr)
mean(mcols(gr[seqnames(gr) == "chr1"])$gc)
mcols(gr[seqnames(gr) == "chr1"])$gc
gr1 <- GRanges(c("chr1", "chr2"), IRanges(start=c(32, 95), width=c(24, 123)))
gr2 <- GRanges(c("chr8", "chr2"), IRanges(start=c(27, 12), width=c(42, 34)))
gr1
gr2
grl <- GRangesList(gr1, gr2)
grl
chrs <- c("chr3", "chr1", "chr2", "chr2", "chr3", "chr1")
gr <- GRanges(chrs, IRanges(sample(1:100, 6, replace=TRUE),
width=sample(3:30, 6, replace=TRUE)))
gr
gr_split <- split(gr, seqnames(gr))
gr_split
gr_split[[1]]
gr_split[[2]]
lapply(gr_split, function(x) order(width(x))) #can operate across an entire list
sapply(gr_split, function(x) min(start(x)))
sapply(gr_split, length)
library(BiocInstaller)
biocLite("GenomicFeatures")
library(GenomicFeatures)
biocLite("TxDb.Mmusculus.UCSC.mm10.ensGene")
library(TxDb.Mmusculus.UCSC.mm10.ensGene)
txdb <- TxDb.Mmusculus.UCSC.mm10.ensGene
genes(txdb)
transcripts(txdb)
exons(txdb)
promoters(txdb)
mm_exons_by_gn <- exonsBy(txdb, by="gene")
mm_exons_by_gn
unlink('Documents/Research/Manuscript Edits for Others/Code_Kaitlyn_Merge_cache', recursive = TRUE)
setwd("/Users/jessicajudson/Desktop/EEOB546X/Assignment_2")
getwd()
setwd("/Users/jessicajudson/Desktop/EEOB546X/Assignment_2")
getwd()
pie(x, labels = names(x), edges = 200, radius = 0.8,
clockwise = FALSE, init.angle = if(clockwise) 90 else 0,
density = NULL, angle = 45, col = NULL, border = NULL)
pie(x, labels = names(x), edges = 200, radius = 0.8, col = NULL, border = NULL)
pie(x, labels = names(x))
x = c(27,2,237,421,421,338,917,2973)
names(x) <- c("Extinct", "Extinct in Wild", "Critically Endangered", "Endangered", "Vulnerable", "Near Threatened", "Data Deficient", "Least Concern")
pie(x, labels = names(x))
x = c(27,239,421,421,338,917,2973)
names(x) <- c("Extinct", "Critically Endangered", "Endangered", "Vulnerable", "Near Threatened", "Data Deficient", "Least Concern")
pie(x, labels = names(x))
x = c(27,239,421,421,338,917,2973)
names(x) <- c("Extinct", "Critically Endangered", "Endangered", "Vulnerable", "Near Threatened", "Data Deficient", "Least Concern")
pie(x, labels = names(x), color = rainbow)
x = c(27,239,421,421,338,917,2973)
names(x) <- c("Extinct", "Critically Endangered", "Endangered", "Vulnerable", "Near Threatened", "Data Deficient", "Least Concern")
pie(x, labels = names(x), col = rainbow)
x = c(27,239,421,421,338,917,2973)
names(x) <- c("Extinct", "Critically Endangered", "Endangered", "Vulnerable", "Near Threatened", "Data Deficient", "Least Concern")
pie(x, labels = names(x), col = rainbow(x))
pie(x, labels = names(x), col = rainbow(x), title = "Reptiles In Trouble")
x = c(27,239,421,421,338,917,2973)
names(x) <- c("Extinct", "Critically Endangered", "Endangered", "Vulnerable", "Near Threatened", "Data Deficient", "Least Concern")
pie(x, labels = names(x), col = rainbow(x), main = "Reptiles In Trouble")
x = c(27,239,421,421,338,917,2973)
names(x) <- c("Extinct", "Critically Endangered", "Endangered", "Vulnerable", "Near Threatened", "Data Deficient", "Least Concern")
pie(x, labels = names(x), col = rainbow(x), main = ("Reptiles In Trouble", cex = 1.5)
x = c(27,239,421,421,338,917,2973)
names(x) <- c("Extinct", "Critically Endangered", "Endangered", "Vulnerable", "Near Threatened", "Data Deficient", "Least Concern")
pie(x, labels = names(x), col = rainbow(x), main = "Reptiles In Trouble", cex.main = 1.5)
pie(x, labels = names(x), col = rainbow(x), main = "Reptiles In Trouble", cex.main = 2.5)
pie(x, labels = names(x), col = rainbow(x), main = "Reptiles In Trouble", cex.main = 2.5, cex.lab = 2)
pie(x, labels = names(x), col = rainbow(x), main = "Reptiles In Trouble", cex.main = 2.5, cex.lab = 2.5)
pie(x, labels = names(x), col = rainbow(x), main = "Reptiles In Trouble", cex.main = 2.5, cex.lab = 2.5)
pie(x, labels = names(x), col = rainbow(x), main = "Reptiles In Trouble", cex.main = 2.5, cex.lab = 4.5)
x = c(27,239,421,421,338,917,2973)
names(x) <- c("Extinct", "Critically Endangered", "Endangered", "Vulnerable", "Near Threatened", "Data Deficient", "Least Concern")
pie(x, labels = names(x), col = rainbow(x), main = "Reptiles In Trouble", cex.main = 2.5, cex.lab = 4.5)
pie(x, labels = names(x), col = rainbow(x), main = "Reptiles In Trouble", cex.main = 2.5, cex.axis = 4.5)
pie(x, labels = names(x), col = rainbow(x), main = "Reptiles In Trouble", cex.main = 2.5, cex = 4.5)
pie(x, labels = names(x), col = rainbow(x), main = "Reptiles In Trouble", cex.main = 2.5, cex = 2.5)
pie(x, labels = names(x), col = rainbow(x), main = "Reptiles In Trouble", cex.main = 2.5, cex = 2.5, radius = 0.8)
x = c(27,239,421,421,338,917,2973)
names(x) <- c("Extinct", "Critically Endangered", "Endangered", "Vulnerable", "Near Threatened", "Data Deficient", "Least Concern")
pie(x, labels = names(x), col = rainbow(x), main = "Reptiles In Trouble", cex.main = 2.5, cex = 2.5, radius = 0.7)
pie(x, labels = names(x), col = rainbow(x), main = "Reptiles In Trouble", cex.main = 2.5, cex = 2.0, radius = 0.7)
pie(x, labels = names(x), col = rainbow(x), main = "Reptiles In Trouble", cex.main = 2.5, cex = 1.8, radius = 0.7)
knitr::opts_chunk$set(echo = TRUE, root.dir = 'C:/Users/jjudson/Desktop/bds-files/chapter-09-working-with-range-data/')
source("http://bioconductor.org/biocLite.R")
biocLite()
library(GenomicRanges)
library(BiocInstaller)
biocLite("GenomicFeatures")
biocLite("TxDb.Mmusculus.UCSC.mm10.ensGene")
library(TxDb.Mmusculus.UCSC.mm10.ensGene)
library(rtracklayer)
dbsnp137 <- import('C:/Users/jjudson/Desktop/bds-files/chapter-09-working-with-range-data/mm10_snp137_chr1_trunc.bed.gz')
newdbsnp137 <- R.utils::gunzip("mm10_snp137_chr1_trunc.bed.gz") #trying to unzip first and then run command
setwd("C:/Users/jjudson/Desktop/bds-files/chapter-09-working-with-range-data/")
setwd("~Desktop/bds-files/chapter-09-working-with-range-data/")
setwd("~Desktop/bds-files/chapter-09-working-with-range-data")
getwd()
setwd("/Users/jjudson/Desktop/bds-files/chapter-09-working-with-range-data/")
dbsnp137 <- import('C:/Users/jjudson/Desktop/bds-files/chapter-09-working-with-range-data/mm10_snp137_chr1_trunc.bed.gz')
knitr::opts_chunk$set(echo = TRUE, root.dir = 'C:/Users/jjudson/Desktop/bds-files/chapter-09-working-with-range-data/')
setwd("/Users/jjudson/Desktop/bds-files/chapter-09-working-with-range-data/")
setwd("/Users/jjudson/Desktop/bds-files/chapter-09-working-with-range-data/")
clear()
setwd("~/Desktop/bds-files/chapter-09-working-with-range-data")
knitr::opts_chunk$set(echo = TRUE, root.dir = 'C:/Users/jjudson/Desktop/bds-files/chapter-09-working-with-range-data/')
library(rtracklayer)
dbsnp137 <- import('mm10_snp137_chr1_trunc.bed.gz')
dbsnp137 <- import('mm10_snp137_chr1_trunc.bed.gz')
knitr::opts_chunk$set(echo = TRUE)
dbsnp137 <- import('mm10_snp137_chr1_trunc.bed.gz')
setwd("~/Desktop/bds-files/chapter-09-working-with-range-data/")
dbsnp137 <- import('mm10_snp137_chr1_trunc.bed.gz')
setwd("~/Desktop/bds-files/chapter-09-working-with-range-data/")
dbsnp137 <- import('mm10_snp137_chr1_trunc.bed.gz')
collapsed_exons <- reduce(exons(txdb), ignore.strand=TRUE) #collapse overlapping exons
source("http://bioconductor.org/biocLite.R")
biocLite()
library(GenomicRanges)
library(BiocInstaller)
biocLite("GenomicFeatures")
biocLite("TxDb.Mmusculus.UCSC.mm10.ensGene")
library(TxDb.Mmusculus.UCSC.mm10.ensGene)
library(rtracklayer)
collapsed_exons <- reduce(exons(txdb), ignore.strand=TRUE) #collapse overlapping exons
setwd("~/Desktop/bds-files/chapter-09-working-with-range-data/")
dbsnp137 <- import('mm10_snp137_chr1_trunc.bed.gz')
collapsed_exons <- reduce(exons(txdb), ignore.strand=TRUE) #collapse overlapping exons
txdb <- TxDb.Mmusculus.UCSC.mm10.ensGene
collapsed_exons <- reduce(exons(txdb), ignore.strand=TRUE) #collapse overlapping exons
chr1_collapsed_exons <- collapsed_exons[seqnames(collapsed_exons) == "chr1"] #pull out just the exons of chromosome 1
summary(width(dbsnp137)) #get a summary of the width
dbsnp137_resized <- dbsnp137 #create a duplicate of the variant file to manipulate
zw_i <- width(dbsnp137_resized) == 0 #pull out all variants with a width of 0 and put them in a new object
dbsnp137_resized[zw_i] <- resize(dbsnp137_resized[zw_i], width=1) #resize the values in the zw_i object to a width of 1
hits <- findOverlaps(dbsnp137_resized, chr1_collapsed_exons,
ignore.strand=TRUE) #find the overlaps between the variants that are resized from the previous step and the collapsed strands of exons, without paying attention to which strand of DNA you are looking at
length(unique(queryHits(hits))) #gives count of exonic variants
length(unique(queryHits(hits)))/length(dbsnp137_resized) #gives proportion by dividing by total
var_counts <- countOverlaps(chr1_collapsed_exons, dbsnp137_resized, ignore.strand=TRUE)
#use countOverlaps to compare the exons to the variants
chr1_collapsed_exons$num_vars <- var_counts #create a new column called num_vars with variant counts per exon
write.table(chr1_collapsed_exons, file = "Number_Variants_per_Exon", row.names = FALSE)
